let e=["Shift","Meta","Alt","Control"],t="object"==typeof navigator&&/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"Meta":"Control";function n(e,t){return"function"==typeof e.getModifierState&&e.getModifierState(t)}function o(o,r={}){var i;let a=null!=(i=r.timeout)?i:1e3,l=Object.keys(o).map(e=>{return[(n=e,n.trim().split(" ").map(e=>{let n=e.split(/\b\+/),o=n.pop();return n=n.map(e=>"$mod"===e?t:e),[n,o]})),o[e]];var n}),u=new Map,d=null;return t=>{t instanceof KeyboardEvent&&(l.forEach(o=>{let r=o[0],i=o[1],a=u.get(r)||r;!function(t,o){return!(o[1].toUpperCase()!==t.key.toUpperCase()&&o[1]!==t.code||o[0].find(e=>!n(t,e))||e.find(e=>!o[0].includes(e)&&o[1]!==e&&n(t,e)))}(t,a[0])?n(t,t.key)||u.delete(r):a.length>1?u.set(r,a.slice(1)):(u.delete(r),i(t))}),d&&clearTimeout(d),d=setTimeout(u.clear.bind(u),a))}}function r(e,t,n={}){var r;let i=null!=(r=n.event)?r:"keydown",a=o(t,n);return e.addEventListener(i,a),()=>{e.removeEventListener(i,a)}}export default r;export{o as createKeybindingsHandler};
//# sourceMappingURL=tinykeys.modern.js.map
